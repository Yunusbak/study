1.
from threading import Thread
from time import time, sleep

def func1():
    for i in range(1,6):
        print(i)
        sleep(1)

def func2():
    print("birinchi func sonlar kvadratlari:")
    for i in range(1, 6):
        print(i**2)
        sleep(1.5)

def func3():
    print("3 func ishni boshladi")
    sleep(3)
    print("3 func ishni tugatdii")

def func4():
    print("func -- 4")
    sleep(2)
    print("func -- 4 --- END")

def threading():
    start_time = time()

    thread1 = Thread(target=func1)
    thread2 = Thread(target=func2)
    thread3 = Thread(target=func3)
    thread4 = Thread(target=func4)

    # Har bir treadni ishga tushiramiz
    thread1.start()
    thread1.join()
    thread2.start()
    thread2.join()
    thread3.start()
    thread3.join()
    thread4.start()
    thread4.join()

    end_time = time()

    # Barcha funksiyalar tugagandan so'ng bo'lgan vaqt farqini hisoblaymiz
    thread_vaqt = end_time - start_time
    print(f"thread ish vaqti -- {thread_vaqt} ")

def main():
    start_time1 = time()
    func1()
    func2()
    func3()
    func4()
    end_time1 = time()
    main_vaqt = end_time1 - start_time1
    print(f"main func vaqti -- {main_vaqt}")

threading()
main()

2.
from multiprocessing import Pool

def juft_sonlar(i):
    if i % 2 == 0:
        return i

if __name__ == '__main__':
    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    with Pool(4) as p:
        result = p.map(juft_sonlar, list)

    result = [x for x in result if x is not None]
    
    print(result)
3.
from multiprocessing import Pool

def name(text):
    names = []
    text1 = text.split(", ")  
    for i in text1:
        if i[0].lower() == "a":  
            names.append(i)
    return names

if __name__ == '__main__':
    text = "Yunus, Salamat, Azamat, Aziz"
    with Pool(3) as p:
        result = p.map(name, [text]) 

    print(result)

  4.
  from multiprocessing import Pool

def len_name(names):
    for i, name in enumerate(names):
        if len(name) > 5:
            names[i] = "False " + name
        else:
            names[i] = "True " + name
    
    return names

if __name__ == '__main__':
    list_names = ["AZIZ", "YUNUS", "SALAMAT", "AZAMAT"]
    with Pool(3) as p:
        result = p.map(len_name, [list_names])[0]

    print(result)
5.
from multiprocessing import Pool

def Tub(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def func(num):
    if Tub(num):
        return f"{num}: Tub son"
    else:
        return f"{num}: Murakkab son"

if __name__ == '__main__':
    numbers = [1,2,3,4,5,6,7,8,9,10]  
    with Pool(4) as p:
        result = p.map(func, numbers)

    print(result)
6.
def edit_str(string):
    list1 = string.split(", ")
    for i, word in enumerate(list1):
        j = 0
        while j < len(word) - 1:
            if word[j] == word[j + 1]:
                word = word[:j] + word[j+1:]
            else:
                j += 1
        list1[i] = word
    return list1

print(edit_str("azziz, yyunus, ssasakjskas"))
7.
def sort_numbers(list):
    list.sort()
    return list

print(sort_numbers([23,5,3,1]))
